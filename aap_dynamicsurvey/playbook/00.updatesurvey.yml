---
- name: Update Survey with Conditional Choices
  hosts: localhost
  tasks:
    - name: Get the date 30 days ago
      command: date --date='30 days ago' "+%Y-%m-%d"
      register: date_30_days_ago

    - name: Display the date 30 days ago
      debug:
        msg: "The date 30 days ago was {{ date_30_days_ago.stdout }}"

    - name: Load dependency mappings
      ansible.builtin.set_fact:
        dependency_map: "{{ lookup('file', '../relationships.json') | from_json }}"

    - name: Fetch Inventory data
      command: python3 ../scripts/dynamic_inventory_generator.py
      register: inventory_output
      ignore_errors: true

    - name: Parse Inventory data
      set_fact:
        inventory_data: "{{ (inventory_output.stdout | from_json) if inventory_output.stdout else [] }}"
      when: inventory_output.stdout is defined and inventory_output.stdout | length > 0

    - name: Prepare survey spec
      set_fact:
        survey_spec: {
          "name": "Dynamic Survey Based on Host Selection",
          "description": "Select options as per your requirements",
          "spec": [
            {
              "question_name": "host_selection",
              "question_description": "Choose a host:",
              "required": true,
              "type": "multiplechoice",
              "variable": "selected_host",
              "choices": "{{ inventory_data | map('string') | list | default([]) }}"
            },
            {
              "question_name": "subscription_selection",
              "question_description": "Choose a subscription:",
              "required": true,
              "type": "multiplechoice",
              "variable": "selected_subscription",
              "choices": "{{ dependency_map | json_query('*.[]') | list | flatten | unique }}"
            }
          ]
        }

    - name: Update survey in Ansible Tower
      ansible.controller.job_template:
        name: "Dynamic Survey Job Template"
        survey_enabled: true
        survey_spec: "{{ survey_spec }}"
      environment:
        TOWER_HOST: "{{tower_host}}"
        TOWER_OAUTH_TOKEN: "{{tower_write_token}}"
      delegate_to: localhost
