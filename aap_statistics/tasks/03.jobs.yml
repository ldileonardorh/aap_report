- name: Fetch Job data
  uri:
    url: "{{ base_url }}{{ job_api_url }}&created__gte={{ job_date_filter }}"
    headers: "{{ headers }}"
    method: GET
    return_content: yes
    status_code: 200
    validate_certs: no
  register: jobs_data_response

- name: Propagate Jobs total records
  ansible.builtin.set_fact:
    jobs_total_records: "{{ jobs_data_response.json.count }}"

- name: print total Jobs records
  ansible.builtin.debug:
    msg: "Total Jobs records: {{ jobs_total_records }}"

- name: calculate total Jobs pages
  ansible.builtin.set_fact:
    temporary_jobs_total_pages: "{{ (jobs_total_records | int) / (records_per_page | int) }}"

- name: print total Jobs records
  ansible.builtin.debug:
    msg: "Original Total Jobs Pages: {{ temporary_jobs_total_pages }}"

- name: Round up the decimal number for Jobs
  ansible.builtin.set_fact:
    jobs_total_pages: "{{ (temporary_jobs_total_pages | float) | round(0, 'ceil') | int }}"

- name: print total Jobs Pages
  ansible.builtin.debug:
    msg: "Total Rounded Jobs Pages: {{ jobs_total_pages }}"

- name: Loop a task based on a number - Jobs
  uri:
    url: "{{ base_url }}{{ job_api_url }}&&created__gte={{ job_date_filter }}&page={{ jobs_page_item }}&page_size={{ records_per_page }}"
    headers: "{{ headers }}"
    method: GET
    return_content: yes
    status_code: 200
    validate_certs: no
  loop: "{{ range(1, (jobs_total_pages | int) + 1) | map('string') }}"
  loop_control:
    loop_var: jobs_page_item
  register: jobs_api_responses

# - name: Debug jobs_api_responses
#   debug:
#     var: jobs_api_responses

- name: Extract data from each page - Jobs
  set_fact:
    jobs_extracted_data: "{{ jobs_extracted_data | default([]) + jobs_item.json.results }}"
  loop: "{{ jobs_api_responses.results }}"
  loop_control:
    loop_var: jobs_item

# - name: Debug jobs_extracted_data
#   ansible.builtin.debug:
#     var: jobs_extracted_data

- name: Prepare data lines for appending - Jobs
  set_fact:
    jobs_data_lines: "{{ jobs_extracted_data | map(attribute='id') | zip(jobs_extracted_data | map(attribute='unified_job_template'), jobs_extracted_data | map(attribute='type'), jobs_extracted_data | map(attribute='launch_type'), jobs_extracted_data | map(attribute='started'), jobs_extracted_data | map(attribute='finished'), jobs_extracted_data | map(attribute='status')) | map('join', '|') | list }}"

- name: Write data lines to file - Jobs
  lineinfile:
    path: "{{ job_output_file }}"
    line: "{{ job_line_item }}"
    create: no
    insertafter: EOF
  loop: "{{ jobs_data_lines }}"
  loop_control:
    loop_var: job_line_item