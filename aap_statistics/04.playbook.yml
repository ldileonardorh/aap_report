---
- name: Gather job data and template data from API and write to CSV
  hosts: localhost
  gather_facts: no
  vars:
    headers:
      Authorization: "{{ bearer_token }}"
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    output_folder: "{{ base_output_folder }}_{{ timestamp }}/"
    job_csv_headers:
      - 'JOB_ID'
      - 'JOB_TEMPLATE_ID'
      - 'JOB_TEMPLATE_TYPE'
      - 'LAUNCH_TYPE'
      - 'START_DATE'
      - 'END_DATE'
      - 'STATUS'
    template_csv_headers:
      - 'ORGANIZATION_NAME'
      - 'ORGANIZATION_DESCRIPTION'
      - 'TEMPLATE_ID'
      - 'TEMPLATE_TYPE'
      - 'TEMPLATE_NAME'
      - 'TEMPLATE_DESCRIPTION'
      - 'TEMPLATE_CREATED_BY'
      - 'TEMPLATE_CREATION_DATE'
      - 'TEMPLATE_EDIT_DATE'
      - 'PLAYBOOK'
      - 'HAS_SURVEY'
      - 'PROJECT_ID'
      - 'PROJECT_NAME'
      - 'PROJECT_DESCRIPTION'
      - 'TOTAL_EXECUTED_JOBS'
      - 'LAST_JOB_RUN'
      - 'LAST_JOB_FAILED'
      - 'NEXT_JOB_RUN'
  tasks:

    ## Date and folders
    - name: Get the date 30 days ago
      command: date --date='30 days ago' "+%Y-%m-%dT%H:%M:%S"
      register: date_30_days_ago_output

    - name: Set date_30_days_ago fact
      set_fact:
        date_30_days_ago: "{{ date_30_days_ago_output.stdout }}"

    - name: Ensure my_variable is set
      set_fact:
        job_date_filter: "{{ start_date | default(date_30_days_ago) }}"

    - name: Print result
      debug:
        msg: "Since Start Date is {{ job_date_filter }}"

    - name: Set output folder fact
      set_fact:
        output_folder: "{{ base_output_folder }}_{{ timestamp }}/"
        job_output_file: "{{ output_folder }}{{ job_template_output_file }}"
        template_output_file: "{{ output_folder }}{{ unified_template_output_file }}"
    
    - name: Ensure output directory exists
      file:
        path: "{{ output_folder }}"
        state: directory

    - name: Initialize job CSV file with headers
      copy:
        dest: "{{ job_output_file }}"
        content: "{{ job_csv_headers | join(separator) }}\n"

    - name: Initialize template CSV file with headers
      copy:
        dest: "{{ template_output_file }}"
        content: "{{ template_csv_headers | join(separator) }}\n"
    ## Date and folders END

    - name: Fetch template data
      uri:
        url: "{{ base_url }}{{ template_api_url }}"
        headers: "{{ headers }}"
        method: GET
        return_content: yes
        status_code: 200
        validate_certs: no
      register: template_data_response

    - name: Propagate total records
      ansible.builtin.set_fact:
        template_total_records: "{{ template_data_response.json.count }}"
    
    - name: print total records
      ansible.builtin.debug:
        msg: "Total Template records: {{ template_total_records }}"
    
    - name: calculate total pages
      ansible.builtin.set_fact:
        temporary_template_total_pages: "{{ (template_total_records | int) / (records_per_page | int) }}"
    
    - name: print total records
      ansible.builtin.debug:
        msg: "Original Total Templates Pages: {{ temporary_template_total_pages }}"
    
    - name: Round up the decimal number
      ansible.builtin.set_fact:
        template_total_pages: "{{ (temporary_template_total_pages | float) | round(0, 'ceil') | int }}"

    - name: print total Pages
      ansible.builtin.debug:
        msg: "Total Rounded Templates Pages: {{ template_total_pages }}"

    - name: Loop a task based on a number
      uri:
        url: "{{ base_url }}{{ template_api_url }}?page={{ item }}&page_size={{ records_per_page }}"
        headers: "{{ headers }}"
        method: GET
        return_content: yes
        status_code: 200
        validate_certs: no
      loop: "{{ range(1, (template_total_pages | int) + 1) | map('string') }}"
      register: api_responses
    
    - name: Debug api_responses
      debug:
        var: api_responses
    
    - name: Extract data from each page
      set_fact:
        extracted_data: "{{ extracted_data | default([]) + item.content | from_json | json_query('results') }}"
      loop: "{{ api_responses.results }}"
      loop_control:
        loop_var: item

    - name: Debug extracted_data
      ansible.builtin.debug:
        var: extracted_data

    - name: Prepare data lines for appending
      set_fact:
        data_lines: "{{ extracted_data | map(attribute='summary_fields.organization.name') | zip(extracted_data | map(attribute='summary_fields.organization.description'), extracted_data | map(attribute='id'), extracted_data | map(attribute='type'), extracted_data | map(attribute='name'), extracted_data | map(attribute='description'), extracted_data | map(attribute='summary_fields.created_by.username'), extracted_data | map(attribute='created'), extracted_data | map(attribute='modified'), extracted_data | map(attribute='playbook') | map('default', ''), extracted_data | map(attribute='survey_enabled'), extracted_data | map(attribute='summary_fields.project.id') | map('default', ''), extracted_data | map(attribute='summary_fields.project.name') | map('default', ''), extracted_data | map(attribute='summary_fields.project.description') | map('default', ''), extracted_data | map(attribute='summary_fields.recent_jobs') | map('length'), extracted_data | map(attribute='last_job_run'), extracted_data | map(attribute='last_job_failed'), extracted_data | map(attribute='next_job_run')) | map('join', '|') | list }}"

    - name: Write data lines to file
      lineinfile:
        path: "{{ template_output_file }}"
        line: "{{ item.summary_fields.organization.name }}|{{ item.summary_fields.organization.description }}|{{ item.id }}|{{ item.type }}|{{ item.name }}|{{ item.description }}|{{ item.summary_fields.created_by.username }}|{{ item.created }}|{{ item.modified }}|{{ item.playbook | default('') }}|{{ item.survey_enabled }}|{{ item.summary_fields.project.id | default('') }}|{{ item.summary_fields.project.name | default('') }}|{{ item.summary_fields.project.description | default('') }}|{{ item.summary_fields.recent_jobs | length }}|{{ item.last_job_run }}|{{ item.last_job_failed }}|{{ item.next_job_run }}"
        create: no
        insertafter: EOF
      loop: "{{ extracted_data }}"
      loop_control:
        loop_var: item

    ## Remote Directory
    - name: creare remote directory
      ansible.builtin.command:
        cmd: mkdir -p "{{remote_path}}{{ output_folder }}"
      delegate_to: "{{ remote_host }}"
      become: yes
      vars:
        ansible_ssh_user: "{{ remote_user }}"
        ansible_ssh_pass: "{{ remote_password }}"
        ansible_become_pass: "{{ become_password }}"
    ## Remote Directory END

    ## Copy Template File to Remote Path
    - name: TEMPLATES - Copy file over SSH
      copy:
        src: "{{ template_output_file }}"
        dest: "{{remote_path}}{{ template_output_file }}"
      delegate_to: "{{ remote_host }}"
      become: yes
      vars:
        ansible_ssh_user: "{{ remote_user }}"
        ansible_ssh_pass: "{{ remote_password }}"
        ansible_become_pass: "{{ become_password }}"